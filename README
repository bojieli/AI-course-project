八数码问题
----------

代码：p1.c，头文件：p1.h

注意：此程序必须在 64 位系统上编译运行！

启发函数：从初始状态到目标状态的曼哈顿距离（包括0在内每个数字的曼哈顿距离之和）

优化：用一个 long （64位）表示棋盘的状态，每个方格里填的数用 4 位表示，36～39位为0的位置。
这样，移动数字的操作就变成了位操作，而移动到的下一个位置、启发函数中用到的曼哈顿距离是从常量数组中查表得到的，不需要条件分支语句，充分利用CPU的多发射和流水线。


N 皇后问题
----------

代码：p2.c，头文件：p2.h

算法的空间复杂度和期望时间复杂度均为 O(n)，n 为皇后个数。在我的笔记本上测试，可在 3.662 秒内解决3次百万皇后问题；在 30.139 秒内解决3次500万皇后问题；在 77.845 秒内解决3次千万皇后问题。（3次是由于接口的输出相当于解决了3次问题）

算法的主要存储空间就是接口要求的 size_t** 数组。事实上，在 64 位系统中，size_t 是 64 位，但只需要 32 位即可表示这一行中皇后所在的列，因此造成了一定的空间浪费。由于 size_t 是接口的要求，我无法对其进行优化。

使用改进的最小冲突算法。
参考了论文 "3,000,000 Queens in Less Than One Minute", Rok Sosic and Jun Gu, SIGART Bulletin, 1991. 
本程序即此论文中的 QS4 算法。此算法首先随机无冲突地排列绝大部分皇后，再针对有冲突的部分用最小冲突算法进行置换，比全部随机后直接用最小冲突算法，性能高很多。

为加快随机数生成速度，从 Wikipedia 上抄了一个简单随机数生成器。

